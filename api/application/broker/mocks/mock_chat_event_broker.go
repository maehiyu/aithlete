// Code generated by MockGen. DO NOT EDIT.
// Source: broker_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "api/application/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatEventBroker is a mock of ChatEventBroker interface.
type MockChatEventBroker struct {
	ctrl     *gomock.Controller
	recorder *MockChatEventBrokerMockRecorder
}

// MockChatEventBrokerMockRecorder is the mock recorder for MockChatEventBroker.
type MockChatEventBrokerMockRecorder struct {
	mock *MockChatEventBroker
}

// NewMockChatEventBroker creates a new mock instance.
func NewMockChatEventBroker(ctrl *gomock.Controller) *MockChatEventBroker {
	mock := &MockChatEventBroker{ctrl: ctrl}
	mock.recorder = &MockChatEventBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatEventBroker) EXPECT() *MockChatEventBrokerMockRecorder {
	return m.recorder
}

// PublishChatEvent mocks base method.
func (m *MockChatEventBroker) PublishChatEvent(ctx context.Context, event dto.ChatEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishChatEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishChatEvent indicates an expected call of PublishChatEvent.
func (mr *MockChatEventBrokerMockRecorder) PublishChatEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishChatEvent", reflect.TypeOf((*MockChatEventBroker)(nil).PublishChatEvent), ctx, event)
}

// SubscribeChatEvent mocks base method.
func (m *MockChatEventBroker) SubscribeChatEvent(ctx context.Context, handler func(dto.ChatEvent) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChatEvent", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeChatEvent indicates an expected call of SubscribeChatEvent.
func (mr *MockChatEventBrokerMockRecorder) SubscribeChatEvent(ctx, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChatEvent", reflect.TypeOf((*MockChatEventBroker)(nil).SubscribeChatEvent), ctx, handler)
}
