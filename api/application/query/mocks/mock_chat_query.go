// Code generated by MockGen. DO NOT EDIT.
// Source: chat_query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "api/application/dto"
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatQueryInterface is a mock of ChatQueryInterface interface.
type MockChatQueryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatQueryInterfaceMockRecorder
}

// MockChatQueryInterfaceMockRecorder is the mock recorder for MockChatQueryInterface.
type MockChatQueryInterfaceMockRecorder struct {
	mock *MockChatQueryInterface
}

// NewMockChatQueryInterface creates a new mock instance.
func NewMockChatQueryInterface(ctrl *gomock.Controller) *MockChatQueryInterface {
	mock := &MockChatQueryInterface{ctrl: ctrl}
	mock.recorder = &MockChatQueryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatQueryInterface) EXPECT() *MockChatQueryInterfaceMockRecorder {
	return m.recorder
}

// FindChatByID mocks base method.
func (m *MockChatQueryInterface) FindChatByID(chatID string) (*entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatByID", chatID)
	ret0, _ := ret[0].(*entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatByID indicates an expected call of FindChatByID.
func (mr *MockChatQueryInterfaceMockRecorder) FindChatByID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatByID", reflect.TypeOf((*MockChatQueryInterface)(nil).FindChatByID), chatID)
}

// FindChatsByUserID mocks base method.
func (m *MockChatQueryInterface) FindChatsByUserID(userID string) ([]dto.ChatSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatsByUserID", userID)
	ret0, _ := ret[0].([]dto.ChatSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatsByUserID indicates an expected call of FindChatsByUserID.
func (mr *MockChatQueryInterfaceMockRecorder) FindChatsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatsByUserID", reflect.TypeOf((*MockChatQueryInterface)(nil).FindChatsByUserID), userID)
}
