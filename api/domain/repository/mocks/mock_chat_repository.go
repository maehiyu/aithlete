// Code generated by MockGen. DO NOT EDIT.
// Source: chat_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatRepositoryInterface is a mock of ChatRepositoryInterface interface.
type MockChatRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryInterfaceMockRecorder
}

// MockChatRepositoryInterfaceMockRecorder is the mock recorder for MockChatRepositoryInterface.
type MockChatRepositoryInterfaceMockRecorder struct {
	mock *MockChatRepositoryInterface
}

// NewMockChatRepositoryInterface creates a new mock instance.
func NewMockChatRepositoryInterface(ctrl *gomock.Controller) *MockChatRepositoryInterface {
	mock := &MockChatRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepositoryInterface) EXPECT() *MockChatRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddAnswer mocks base method.
func (m *MockChatRepositoryInterface) AddAnswer(chatId string, answer *entity.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", chatId, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockChatRepositoryInterfaceMockRecorder) AddAnswer(chatId, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockChatRepositoryInterface)(nil).AddAnswer), chatId, answer)
}

// AddQuestion mocks base method.
func (m *MockChatRepositoryInterface) AddQuestion(chatId string, question *entity.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", chatId, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockChatRepositoryInterfaceMockRecorder) AddQuestion(chatId, question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockChatRepositoryInterface)(nil).AddQuestion), chatId, question)
}

// CreateChat mocks base method.
func (m *MockChatRepositoryInterface) CreateChat(chat *entity.Chat) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", chat)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) CreateChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).CreateChat), chat)
}

// FindChatByID mocks base method.
func (m *MockChatRepositoryInterface) FindChatByID(chatId string) (*entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChatByID", chatId)
	ret0, _ := ret[0].(*entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChatByID indicates an expected call of FindChatByID.
func (mr *MockChatRepositoryInterfaceMockRecorder) FindChatByID(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChatByID", reflect.TypeOf((*MockChatRepositoryInterface)(nil).FindChatByID), chatId)
}

// FindParticipantIDsByChatID mocks base method.
func (m *MockChatRepositoryInterface) FindParticipantIDsByChatID(chatId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindParticipantIDsByChatID", chatId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindParticipantIDsByChatID indicates an expected call of FindParticipantIDsByChatID.
func (mr *MockChatRepositoryInterfaceMockRecorder) FindParticipantIDsByChatID(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindParticipantIDsByChatID", reflect.TypeOf((*MockChatRepositoryInterface)(nil).FindParticipantIDsByChatID), chatId)
}

// GetQuestionContent mocks base method.
func (m *MockChatRepositoryInterface) GetQuestionContent(questionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionContent", questionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionContent indicates an expected call of GetQuestionContent.
func (mr *MockChatRepositoryInterfaceMockRecorder) GetQuestionContent(questionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionContent", reflect.TypeOf((*MockChatRepositoryInterface)(nil).GetQuestionContent), questionID)
}

// UpdateChat mocks base method.
func (m *MockChatRepositoryInterface) UpdateChat(chat *entity.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChat", chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChat indicates an expected call of UpdateChat.
func (mr *MockChatRepositoryInterfaceMockRecorder) UpdateChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChat", reflect.TypeOf((*MockChatRepositoryInterface)(nil).UpdateChat), chat)
}
