// Code generated by MockGen. DO NOT EDIT.
// Source: vector_store_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVectorStoreRepositoryInterface is a mock of VectorStoreRepositoryInterface interface.
type MockVectorStoreRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVectorStoreRepositoryInterfaceMockRecorder
}

// MockVectorStoreRepositoryInterfaceMockRecorder is the mock recorder for MockVectorStoreRepositoryInterface.
type MockVectorStoreRepositoryInterfaceMockRecorder struct {
	mock *MockVectorStoreRepositoryInterface
}

// NewMockVectorStoreRepositoryInterface creates a new mock instance.
func NewMockVectorStoreRepositoryInterface(ctrl *gomock.Controller) *MockVectorStoreRepositoryInterface {
	mock := &MockVectorStoreRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockVectorStoreRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorStoreRepositoryInterface) EXPECT() *MockVectorStoreRepositoryInterfaceMockRecorder {
	return m.recorder
}

// SaveQAPair mocks base method.
func (m *MockVectorStoreRepositoryInterface) SaveQAPair(ctx context.Context, chatID, question, answer, answerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQAPair", ctx, chatID, question, answer, answerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveQAPair indicates an expected call of SaveQAPair.
func (mr *MockVectorStoreRepositoryInterfaceMockRecorder) SaveQAPair(ctx, chatID, question, answer, answerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQAPair", reflect.TypeOf((*MockVectorStoreRepositoryInterface)(nil).SaveQAPair), ctx, chatID, question, answer, answerID)
}
