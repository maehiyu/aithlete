// Code generated by MockGen. DO NOT EDIT.
// Source: participant_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParticipantRepositoryInterface is a mock of ParticipantRepositoryInterface interface.
type MockParticipantRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantRepositoryInterfaceMockRecorder
}

// MockParticipantRepositoryInterfaceMockRecorder is the mock recorder for MockParticipantRepositoryInterface.
type MockParticipantRepositoryInterfaceMockRecorder struct {
	mock *MockParticipantRepositoryInterface
}

// NewMockParticipantRepositoryInterface creates a new mock instance.
func NewMockParticipantRepositoryInterface(ctrl *gomock.Controller) *MockParticipantRepositoryInterface {
	mock := &MockParticipantRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockParticipantRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipantRepositoryInterface) EXPECT() *MockParticipantRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockParticipantRepositoryInterface) Create(participant *entity.Participant) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", participant)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockParticipantRepositoryInterfaceMockRecorder) Create(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParticipantRepositoryInterface)(nil).Create), participant)
}

// FindByID mocks base method.
func (m *MockParticipantRepositoryInterface) FindByID(participantID string) (*entity.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", participantID)
	ret0, _ := ret[0].(*entity.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockParticipantRepositoryInterfaceMockRecorder) FindByID(participantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockParticipantRepositoryInterface)(nil).FindByID), participantID)
}

// FindByIDs mocks base method.
func (m *MockParticipantRepositoryInterface) FindByIDs(participantIDs []string) ([]*entity.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", participantIDs)
	ret0, _ := ret[0].([]*entity.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockParticipantRepositoryInterfaceMockRecorder) FindByIDs(participantIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockParticipantRepositoryInterface)(nil).FindByIDs), participantIDs)
}

// Update mocks base method.
func (m *MockParticipantRepositoryInterface) Update(participant *entity.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockParticipantRepositoryInterfaceMockRecorder) Update(participant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockParticipantRepositoryInterface)(nil).Update), participant)
}
